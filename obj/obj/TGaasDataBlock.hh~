#ifndef TGaasDataBlock_hh
#define TGaasDataBlock_hh

#include "Stntuple/obj/TStnDataBlock.hh"

class AbsEvent;
class TGaas;

class TGaasDataBlock: public TStnDataBlock {
public:
  
//   friend Int_t TGaas::InitVme1742DataBlock(TStnDataBlock* block, 
// 					      AbsEvent*      event, 
// 					      int            mode);
  enum {
	kNFreeInts   =  5,                    // put in starting right from version 1
	kNFreeFloats =  5
  };

protected:

  int             fNSamples;		// number of samples in the waveform
  int             fNChannels;		// number of channels
  int             fTriggerSample;       // sample on which the scope triggered
  int             fInt  [kNFreeInts  ]; // provision for future I/O expansion
  float           fSampleTime;		// sampling time, sec
  float           fTriggerTime;	        // not sure what exactly this is, but may be useful
  float           fFloat[kNFreeFloats]; // provision for future I/O expansion
  
  TVectorT<float> fT;			// time samples
  TMatrixT<float> fV;			// data: [nchannels][nsamples]
//-----------------------------------------------------------------------------
//  functions
//-----------------------------------------------------------------------------
public:
					// ****** constructors and destructor
  TGaasDataBlock();
  virtual ~TGaasDataBlock();
					// ****** accessors

  int       GetNSamples     () { return fNSamples;   }
  int       GetNChannels    () { return fNChannels;  }
  float     GetSampleTime   () { return fSampleTime; }
  int       GetTriggerSample() { return fTriggerSample; }
  float     GetTriggerTime  () { return fTriggerTime;   }
  TVectorT<float>* GetT     () { return &fT;            }
  TMatrixT<float>* GetV     () { return &fV;            }
  
					// voltages in a given 'Channel'
  TMatrixTRow<float>* GetV(int Channel) { return &fV[Channel]; }

//-----------------------------------------------------------------------------
// modifiers
//-----------------------------------------------------------------------------
					// use free space to save the run number
					// not implemented yet
  void    SetRunNumber(int RunNumber) { 
  }

  void    SetEventHeader(UInt_t* Data) { 
    memcpy(fEventHeader,Data,4*sizeof(UInt_t));
  }

  void    SetGroupHeader(UInt_t* Data) { 
    memcpy(fGroupHeader,Data,kMaxNGroups*sizeof(UInt_t));
  }
					// set bits 4-7 to 1 in case of evaluation board

  void    SetEvalBoardCode() { fEventHeader[1] |= 0x000000f0; }

  void    SetGroupTriggerTimeTag(UInt_t* Data) { 
    memcpy(fGroupTriggerTimeTag,Data,kMaxNGroups*sizeof(UInt_t));
  }

  void    SetGroupData(Int_t I, UShort_t* Data) { 
    memcpy(fGroupData[I][0],Data,8*1024*sizeof(UShort_t));
  }

  void    SetCellData(int Group,Int_t Channel,Int_t I, UShort_t Data) { 
    fGroupData[Group][Channel][I] = Data;
  }

  void    SetTriggerData(Int_t I, UShort_t* Data) { 
    memcpy(fTriggerData[I],Data,1024*sizeof(UShort_t));
  }
//-----------------------------------------------------------------------------
// overloaded methods of TObject
//-----------------------------------------------------------------------------
  void    Clear(Option_t* opt = "");
  void    Print(Option_t* opt = "") const;

  ClassDef(TGaasDataBlock,1)	// oscilloscope data block
};

#endif
